package edu.cmu.cs.cs214.rec02;

import org.junit.Before;
import org.junit.Test;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;import static org.junit.Assert.*;


/**
 * TODO: 
 * 1. The {@link LinkedIntQueue} has no bugs. We've provided you with some example test cases.
 * Write your own unit tests to test against IntQueue interface with specification testing method 
 * using mQueue = new LinkedIntQueue();
 * 
 * 2. 
 * Comment mQueue = new LinkedIntQueue(); and uncomment mQueue = new ArrayIntQueue();
 * Use your test cases from part 1 to test ArrayIntQueue and find bugs in the {@link ArrayIntQueue} class
 * Write more unit tests to test the implementation of ArrayIntQueue, with structural testing method
 * Aim to achieve 100% line coverage for ArrayIntQueue
 *
 * @author Alex Lockwood, George Guo, Terry Li
 */
public class IntQueueTest {

    private IntQueue mQueue;
    private List<Integer> testList;

    /**
     * Called before each test.
     */
    @Before
    public void setUp() {
        // comment/uncomment these lines to test each class
        mQueue = new LinkedIntQueue();
    //   mQueue = new ArrayIntQueue();
        testList = new ArrayList<>(List.of(1, 2, 3));
    }

    @Test
    public void testIsEmpty() {
        // This is an example unit test
        assertTrue(mQueue.isEmpty());
    }

    // Queue —Ö–æ–æ—Å–æ–Ω –±–∏—à “Ø–µ–¥ isEmpty() –∑”©–≤ false –±—É—Ü–∞–∞–∂ –±—É–π —ç—Å—ç—Ö
    @Test
    public void testNotEmpty() {
        // 1. –≠—Ö—ç–Ω–¥—ç—ç Queue —Ö–æ–æ—Å–æ–Ω –±–∞–π—Ö —ë—Å—Ç–æ–π
        assertTrue(mQueue.isEmpty());
    
        // 2. Queue-–¥ ”©–≥”©–≥–¥”©–ª –Ω—ç–º—ç—Ö
        mQueue.enqueue(42);
    
        // 3. Queue –æ–¥–æ–æ —Ö–æ–æ—Å–æ–Ω –±–∏—à –±–∞–π—Ö —ë—Å—Ç–æ–π
        assertFalse(mQueue.isEmpty());
    
        // 4. Queue-–¥ –¥–∞—Ö–∏–Ω ”©–≥”©–≥–¥”©–ª –Ω—ç–º—ç—Ö
        mQueue.enqueue(99);
        assertFalse(mQueue.isEmpty());
    
        // 5. –ë“Ø—Ö —ç–ª–µ–º–µ–Ω—Ç–∏–π–≥ –≥–∞—Ä–≥–∞–∂ queue-–≥ —Ö–æ–æ—Å–ª–æ—Ö
        mQueue.dequeue();
        assertFalse(mQueue.isEmpty()); // –ù—ç–≥ —ç–ª–µ–º–µ–Ω—Ç “Ø–ª–¥—Å—ç–Ω
    
        mQueue.dequeue();
        assertTrue(mQueue.isEmpty()); // –û–¥–æ–æ –±“Ø—Ö—ç–ª–¥—ç—ç —Ö–æ–æ—Å–æ–Ω –±–æ–ª—Å–æ–Ω
    }
    

    @Test
    public void testPeekEmptyQueue() {
        mQueue.peek();
    }

    @Test
    public void testClear() {
        mQueue.enqueue(10);
        mQueue.enqueue(20);
        mQueue.clear();
        assertTrue(mQueue.isEmpty());
        assertEquals(0, mQueue.size());
        //assertNull(mQueue.peek());
    }

    @Test
    public void testPeekNoEmptyQueue() {
        // Queue-–¥ ”©–≥”©–≥–¥”©–ª –Ω—ç–º—ç—Ö
        mQueue.enqueue(10);
        mQueue.enqueue(20);
        mQueue.enqueue(30);
    
        // peek() –Ω—å —ç—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç (10)-–≥ –±—É—Ü–∞–∞—Ö —ë—Å—Ç–æ–π
        assertEquals(Integer.valueOf(10), mQueue.peek());
    
        // peek() –Ω—å queue-–∏–π–Ω —Ö—ç–º–∂—ç—ç–Ω–¥ –Ω”©–ª”©”©–ª”©—Ö —ë—Å–≥“Ø–π
        assertEquals(3, mQueue.size());
    
        // –î–∞—Ö–∏–Ω peek() —Ö–∏–π—Ö—ç–¥ “Ø—Ä –¥“Ø–Ω ”©”©—Ä—á–ª”©–≥–¥”©—Ö —ë—Å–≥“Ø–π
        assertEquals(Integer.valueOf(10), mQueue.peek());
    }    

    @Test
    public void testEnqueue() {
        // This is an example unit test
        for (int i = 0; i < testList.size(); i++) {
            mQueue.enqueue(testList.get(i));
            assertEquals(testList.get(0), mQueue.peek());
            assertEquals(i + 1, mQueue.size());
        }
    }

    @Test
    public void testDequeue() {
        for (int i = 0; i < testList.size(); i++) {
            mQueue.enqueue(testList.get(i));
        }
    
        //FIFO –∑–∞—Ä—á–º–∞–∞—Ä –∑”©–≤ —Ö–∞—Å–∞–≥–¥–∞–∂ –±—É–π —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        for (int i = 0; i < testList.size(); i++) {
            assertEquals(testList.get(i), mQueue.dequeue()); // –û—Ä—É—É–ª—Å–∞–Ω –¥–∞—Ä–∞–∞–ª–ª–∞–∞—Ä–∞–∞ –≥–∞—Ä–∞—Ö —ë—Å—Ç–æ–π
    
            // –•—ç—Ä—ç–≤ queue-–¥ —ç–ª–µ–º–µ–Ω—Ç “Ø–ª–¥—Å—ç–Ω –±–æ–ª peek() –¥–∞—Ä–∞–∞–≥–∏–π–Ω —ç–ª–µ–º–µ–Ω—Ç —Ä“Ø“Ø –∑–∞–∞—Ö —ë—Å—Ç–æ–π
            if (i < testList.size() - 1) {
                assertEquals(testList.get(i + 1), mQueue.peek());
            }
        }
    
        //Queue —Ö–æ–æ—Å–æ–Ω “Ø–µ–¥ dequeue() –Ω—å null –±—É—Ü–∞–∞—Ö —ë—Å—Ç–æ–π
        assertNull(mQueue.dequeue());
    }

    @Test
    public void testContent() throws IOException {
        // This is an example unit test
        InputStream in = new FileInputStream("src/test/resources/data.txt");
        try (Scanner scanner = new Scanner(in)) {
            scanner.useDelimiter("\\s*fish\\s*");

            List<Integer> correctResult = new ArrayList<>();
            while (scanner.hasNextInt()) {
                int input = scanner.nextInt();
                correctResult.add(input);
                System.out.println("enqueue: " + input);
                mQueue.enqueue(input);
            }

            for (Integer result : correctResult) {
                assertEquals(mQueue.dequeue(), result);
            }
        }
    }

    @Test
    public void testEnsureCapacityExpansion() {
            ArrayIntQueue queue = new ArrayIntQueue();
            
            // –≠—Ö–Ω–∏–π –±–∞–≥—Ç–∞–∞–º–∂ 10 —Ç—É–ª —Ç“Ø“Ø–Ω—ç—ç—Å –∏—Ö —ç–ª–µ–º–µ–Ω—Ç –Ω—ç–º–Ω—ç
            for (int i = 0; i < 11; i++) {
                queue.enqueue(i);
            }

            // 11 –¥—ç—Ö —ç–ª–µ–º–µ–Ω—Ç –Ω—ç–º—ç–≥–¥—Å—ç–Ω —Ç—É–ª –±–∞–≥—Ç–∞–∞–º–∂ ”©—Å—Å”©–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            assertEquals(11, queue.size());
            assertEquals(Integer.valueOf(0), queue.peek()); // üõ† –≠—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∑”©–≤ “Ø–ª–¥—Å—ç–Ω —ç—Å—ç—Ö
    }
} 